<script>
    // Make functions globally available
    window.toggleAllTickets = function() {
        const selectAllCheckbox = document.getElementById('selectAllTickets');
        const ticketCheckboxes = document.querySelectorAll('.ticket-checkbox');
        
        console.log('Toggle all tickets:', selectAllCheckbox.checked);
        
        ticketCheckboxes.forEach(checkbox => {
            checkbox.checked = selectAllCheckbox.checked;
            console.log('Ticket checkbox updated:', {
                ticketId: checkbox.value,
                checked: checkbox.checked
            });
        });
    };

    window.handleTicketSelection = function(checkbox) {
        console.log('Ticket checkbox changed:', {
            ticketId: checkbox.value,
            checked: checkbox.checked
        });
        
        // Update select all checkbox state
        const selectAllCheckbox = document.getElementById('selectAllTickets');
        const allCheckboxes = document.querySelectorAll('.ticket-checkbox');
        const allChecked = Array.from(allCheckboxes).every(cb => cb.checked);
        selectAllCheckbox.checked = allChecked;
        
        console.log('Select all checkbox updated:', allChecked);
    };

    // Current admin being assigned to
    let currentAdminId = null;
    let currentAdminName = null;
    
    // Function to get selected ticket IDs
    window.getSelectedTicketIds = function() {
        const ticketCheckboxes = document.querySelectorAll('.ticket-checkbox:checked');
        const selectedIds = Array.from(ticketCheckboxes).map(checkbox => checkbox.value);
        console.log('Selected ticket IDs:', selectedIds);
        return selectedIds;
    };
    
    // Function to show the confirmation modal
    window.showAssignConfirmation = function(adminId, adminName) {
        console.log('Showing modal for admin:', adminId, adminName);
        const selectedTickets = getSelectedTicketIds();
        
        if (selectedTickets.length === 0) {
            alert('Please select at least one ticket to assign');
            return;
        }
        
        currentAdminId = adminId;
        currentAdminName = adminName;
        
        document.getElementById('selectedCount').textContent = selectedTickets.length;
        document.getElementById('adminName').textContent = adminName;
        document.getElementById('confirmModal').style.display = 'flex';
    };
    
    // Function to close the modal
    window.closeAssignConfirmation = function() {
        console.log('Closing modal');
        document.getElementById('confirmModal').style.display = 'none';
        currentAdminId = null;
        currentAdminName = null;
    };
    
    // Function to confirm the assignment
    window.confirmAssignment = async function() {
        const selectedTickets = getSelectedTicketIds();
        
        if (selectedTickets.length === 0) {
            alert('Please select at least one ticket to assign');
            return;
        }
        
        if (!currentAdminId) {
            alert('No admin selected');
            return;
        }
        
        try {
            console.log('=== Starting Ticket Assignment Process ===');
            console.log('Selected tickets:', selectedTickets);
            console.log('Admin ID:', currentAdminId);
            console.log('Admin Name:', currentAdminName);
            
            // Assign each ticket one by one
            for (const ticketId of selectedTickets) {
                console.log(`\nProcessing ticket ${ticketId}:`);
                const requestBody = { ticketId, adminId: currentAdminId };
                console.log('Request payload:', requestBody);
                
                const response = await fetch('/assign/tickets', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestBody),
                });
                
                console.log(`Response status: ${response.status}`);
                const data = await response.json();
                console.log('Response data:', data);
                
                if (!response.ok) {
                    console.error(`Failed to assign ticket ${ticketId}:`, data);
                    alert(`Failed to assign ticket ${ticketId}: ${data.message}`);
                    continue;
                }
                
                console.log(`Successfully assigned ticket ${ticketId}`);
                
                // Remove the assigned ticket from the list
                const ticketElement = document.querySelector(`#ticket-${ticketId}`).closest('.ticket-card');
                if (ticketElement) {
                    ticketElement.remove();
                    console.log(`Removed ticket ${ticketId} from the UI`);
                } else {
                    console.log(`Could not find ticket element ${ticketId} in the UI`);
                }
            }
            
            // Check if there are any tickets left
            const remainingTickets = document.querySelectorAll('.ticket-card');
            console.log(`Remaining tickets: ${remainingTickets.length}`);
            
            if (remainingTickets.length === 0) {
                const ticketsList = document.getElementById('tickets');
                if (ticketsList) {
                    ticketsList.innerHTML = '<p class="empty-msg">No unassigned tickets.</p>';
                    console.log('Updated UI to show no tickets message');
                }
            }
            
            // Close the modal
            closeAssignConfirmation();
            
            // Show success message
            alert(`Successfully assigned ${selectedTickets.length} ticket(s) to ${currentAdminName}`);
            console.log('=== Ticket Assignment Process Completed ===');
            
        } catch (error) {
            console.error('Error in ticket assignment process:', error);
            alert('Error assigning tickets: ' + error.message);
            closeAssignConfirmation();
        }
    };
    
    window.goBack = function() {
        document.getElementById('content-area').innerHTML =` 
            <h2>Welcome to Superadmin Dashboard</h2>
            <p>Select an option from the sidebar.</p>`;
    };

    // Add event listeners when the document is loaded
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Document loaded, setting up event listeners');
        
        // Select all checkbox
        const selectAllCheckbox = document.getElementById('selectAllTickets');
        selectAllCheckbox.addEventListener('change', toggleAllTickets);

        // Individual checkboxes
        const ticketCheckboxes = document.querySelectorAll('.ticket-checkbox');
        ticketCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                handleTicketSelection(this);
            });
        });

        // Assign buttons
        const assignButtons = document.querySelectorAll('.assign-btn');
        assignButtons.forEach(button => {
            button.addEventListener('click', function() {
                const adminId = this.getAttribute('data-admin-id');
                const adminName = this.getAttribute('data-admin-name');
                showAssignConfirmation(adminId, adminName);
            });
        });

        // Cancel button
        document.getElementById('cancelAssign').addEventListener('click', closeAssignConfirmation);

        // Confirm button
        document.getElementById('confirmAssign').addEventListener('click', confirmAssignment);
    });
</script>

<div class="assign-tickets-container">
    <button class="back-btn" onclick="goBack()">‚¨Ö Back</button>
    <h2>Assign Tickets</h2>

    <div class="assign-grid">
        <!-- Tickets Section -->
        <div class="tickets-panel">
            <h3>üéü Unassigned Tickets</h3>
            <div class="select-all-container">
                <label class="select-all-label">
                    <input type="checkbox" id="selectAllTickets" onchange="toggleAllTickets()">
                    Select All Tickets
                </label>
            </div>
            <div class="tickets-list" id="tickets">
                <% if (tickets.length === 0) { %>
                    <p class="empty-msg">No unassigned tickets.</p>
                <% } else { %>
                    <% tickets.forEach(ticket => { %>
                        <div class="ticket-card">
                            <input type="checkbox" 
                                   id="ticket-<%= ticket.id %>" 
                                   value="<%= ticket.id %>" 
                                   class="ticket-checkbox"
                                   onchange="handleTicketSelection(this)">
                            <div class="ticket-info">
                                <strong><%= ticket.subject %></strong>
                                <span class="location">üìç <%= ticket.location %></span>
                            </div>
                        </div>
                    <% }); %>
                <% } %>
            </div>
        </div>

        <!-- Admins Section -->
        <div class="admins-panel">
            <h3>üë®‚Äçüíº Support Agents</h3>
            <div class="admins-list" id="admins">
                <% if (admins.length === 0) { %>
                    <p class="empty-msg">No Support Agents available.</p>
                <% } else { %>
                    <% admins.forEach(admin => { %>
                        <div class="admin-card">
                            <div class="admin-info">
                                <strong>üë§ <%= admin.username %></strong>
                                <span class="location">üìç <%= admin.location %></span>
                            </div>
                            <button class="assign-btn" 
                                    data-admin-id="<%= admin.id %>" 
                                    data-admin-name="<%= admin.username %>">
                                Assign Selected Tickets
                            </button>
                        </div>
                    <% }); %>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div id="confirmModal" class="modal">
    <div class="modal-content">
        <h3>Confirm Assignment</h3>
        <p>Are you sure you want to assign <span id="selectedCount">0</span> ticket(s) to <span id="adminName"></span>?</p>
        <div class="modal-buttons">
            <button id="cancelAssign" class="cancel-btn">Cancel</button>
            <button id="confirmAssign" class="confirm-btn">Confirm</button>
        </div>
    </div>
</div>

<style>
    /* Footer Styles */
    .footer {
        background-color: #2c3e50;
        color: white;
        text-align: center;
        padding: 1rem;
        position: fixed;
        bottom: 0;
        width: 100%;
        height: 30px;
        z-index: 1000;
    }

    /* Page Container */
    .assign-tickets-container {
        padding: 20px;
        background: #f4f4f4;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 4rem; /* Add margin to prevent content from being hidden behind footer */
    }

    /* Back Button */
    .back-btn {
        padding: 8px 12px;
        background: #333;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-bottom: 15px;
        transition: 0.3s;
    }

    .back-btn:hover {
        background: #555;
    }

    /* Grid Layout */
    .assign-grid {
        display: flex;
        gap: 20px;
    }

    /* Tickets Panel */
    .tickets-panel, .admins-panel {
        flex: 1;
        background: white;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        min-height: 300px;
    }

    /* Titles */
    .tickets-panel h3, .admins-panel h3 {
        text-align: center;
        padding-bottom: 10px;
        border-bottom: 2px solid #ddd;
    }

    /* Select All Container */
    .select-all-container {
        padding: 10px 0;
        border-bottom: 1px solid #eee;
        margin-bottom: 10px;
    }

    .select-all-label {
        display: flex;
        align-items: center;
        font-weight: bold;
        cursor: pointer;
    }

    /* Ticket Cards */
    .tickets-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding-top: 10px;
    }

    .ticket-card {
        background: #2b616a;
        color: white;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
        display: flex;
        align-items: center;
    }

    .ticket-card:hover {
        transform: scale(1.02);
        box-shadow: 0 3px 7px rgba(0, 0, 0, 0.15);
    }

    .ticket-checkbox {
        margin-right: 15px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }

    .ticket-info {
        flex: 1;
    }

    .ticket-info strong {
        display: block;
        margin-bottom: 5px;
    }

    .ticket-info .location {
        display: block;
        font-size: 0.9em;
        color: #e8f5e9;
    }

    /* Admin Cards */
    .admins-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
        padding-top: 10px;
    }

    .admin-card {
        background: #3a9489;
        color: white;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: 0.3s;
    }

    .admin-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .admin-info strong {
        display: block;
        margin-bottom: 5px;
    }

    .admin-info .location {
        display: block;
        font-size: 0.9em;
        color: #e8f5e9;
    }

    /* Empty Message */
    .empty-msg {
        text-align: center;
        color: #999;
        font-style: italic;
        padding: 20px;
    }

    /* Modal */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        padding: 25px;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        position: relative;
    }

    .modal-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

    .cancel-btn, .confirm-btn {
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .cancel-btn {
        background: #e74c3c;
        color: white;
    }

    .confirm-btn {
        background: #2ecc71;
        color: white;
    }

    .cancel-btn:hover {
        background: #c0392b;
    }

    .confirm-btn:hover {
        background: #27ae60;
    }

    /* Assign Button */
    .assign-btn {
        background: #4CAF50;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.3s;
        width: 100%;
        margin-top: 10px;
    }

    .assign-btn:hover {
        background: #45a049;
    }
</style> 